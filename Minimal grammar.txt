type
properties
methods: block (args) { } syntax can also be used for lambdas
comments
while loop
if/else
generics
attributes (private, universal)
imports/usings
text & number literals
native blocks
nullable

https://www.dartlang.org/articles/idiomatic-dart/
- has some good ideas (e. g. very light-weight doc comment c-refs using [])

x = (a, b) => 2;
x(a, b) => 2;
x(a, b) { return 2; }
int x(a, b) => 2


primitive types:
* int ("platform" integer, at least 32 bytes)
* byte
* int32, int64, num (as in dart) ???

core types:
* text (string)
* PlatformArray<T> (native list/array)

syntax:

attributes:
	identifier[(...)] list

declaration:
	type declaration: [attributes] type Name [generic parameters] [is base classes] { [member declarations] }
	method declaration: [attributes] [return type] Name [generic parameters] method body
	property declaration: [attributes] [type] Name [generic parameters] [{ [member declarations, including getter and setter decls] }] [= default value expression]
	getter declaration: get expression (can use value, field)
	setter declaration: set statement (can use value, field)
	
statement (void expression):
	using [namespace]; => lasts until the end of a scope (imports a namespace)
	expression;
	while (expression) block
	return expression;
	[type] assignable [= expression]; (assignable is name[.name][expression])

expression:
	Name
	(expression)
	expression.Name
	expression[<...>](expressions)	
	expression[expressions]
	expression is type
	expression as[?] type
	expression([args])
	expression [+-*/andor==!=] expression
	!expression
	method body
	throw expression
	literal (numeric, boolean, null, text)
	try expression [catch expression] [finally statement]
	if expression expression [else expression] // no parens for if!
	[attributes] { statement list [return [expression]]; } (block)
	[expression, ...] (seq literal: defaults to immutablelist but can have type inferred)
	dictionary literal? (e. g. json)
	object literal (C# anonymous type)?
	

universal type wyvern.collections.MutableList<T> is MutableList<T>
{
	private PlatformArray<T> items;
	count { private set; } = 0
	
	public MutableList() 
	{
		MutableList<T>(16);
	}
	
	public MutableList(int capacity)	
		where capacity >= 0
	{
		items = PlatformArray<T>(16);
	}
	
	get = (int i) where this.isValidIndex(i) => this.items[i]		
		
	set = (int index, T value) where this.isValidIndex(index) => this.items[index] = value		
		
	add(T value) where value >= 0 {
		this.ensureCapacity(this.count + 1);
		this.items[count + 1] = value;
		this.count = this.count + 1;
	}
	
	private void ensureCapacity(int count) {
		if (count < this.items.count) {	
			var newItems = PlatformArray<T>(2 * count);
			this.items.copyTo(newItems);
			this.items = newItems;
		}
	}
}

