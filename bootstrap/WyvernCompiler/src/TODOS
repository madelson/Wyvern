* Universal DFA class with compile() method
* Visitor pattern abstraction with replacePattern methods
* Regex simplification (e. g. remove ?, +), replace some escapes
* Error handling in parser
* createVirtualSymbol in SymbolType (affects printing as well)
* use listOf() and optional() symbols everywhere they're needed, possibly expand symbol API or subclass it so we can do isOption() isList() elementType()
* support more weird escaped characters in regex (see java regex spec)
* special (multichar) characters in ranges
* single precedence api for parsers, dfa to nfa, and lexer generators
* fix automaton equals() and hashcode() to not rely on state names
* absoluteposition for symbols
* pushback for fancy reader

Language Ideas:
* extractor-based function pattern matching from scala, so I can do:
case Sqrt(x) where x is an int => ...
* property-based pattern matching: case User(Name n, IsAdmin: false) where n.startsWith("mike") =>
* enumerable-based pattern matching: case [1, 2, 3] =>
* regexes are just patterns
* methods for finding all matches to a pattern in an iterable (note: sequence patterns vs item patterns)
* ranges [1 to 5) or [1 to 5] (.. or to)?
* iterator decorator that allows watchers (e. g. for tracking line number, etc.). Decorator for mark/pushback, watcher for line number tracking (save/restore state!)

Things to prevent:
-overuse of inheritance
	* prefer extensions, interfaces, delegation
	NO inheritance, just interfaces BUT interfaces can have implementations of methods & default implementations
	DELEGATION: unimplemented methods pass through to an underlying object
	Problems with inheritance:
		tight coupling
		misplacement of utility methods
		hard-to-trace code which weaves in and out of base classes
		Containment would be better (e. g. base tests in APT should be test environments)
		Rare support for multiple inheritance
	Benefits:
		polymorphism
		shared boilerplate (e. g. field declaration)
		ability to make complex interface easy to implement (e. g. abstract collections in java)
		
	Java-style interfaces get you:
		polymorphism
		multiple inheritance
		
	Mixins/traits get you:
		interfaces but with the opportunity to share code across implementations
		-> what makes a mixin different from a base class?
			can't declare fields (but this doesn't matter when all fields are properties...)
			can't have private stuff (but people will just use protected)
				could require public get for all props, protected or public set
	
	Extension methods get you:
		same thing as mixin with "final" methods, except can overload extension methods in different ways
		problems: can be like method hiding, which is confusing
		benefits: removes need for utility methods to be part of interfaces (e. g. most String methods don't need private access)			
-bad cascading & builder proliferation
	* use comma "auto cascades"
-fields instead of properties
	* everything is a property, even if it looks like a field
	
Nullable types:
	-in Wyvern, null is not a valid value except on nullable types
	-if T is non-nullable, T? is the nullable type
		-but, if T is int?, T? is still int?
	-you have to cast/.Value a nullable to get the value
	-someVariable.Type will NEVER return a nullable type: you'll always get a type or a null reference exception
	-if A extends B then
		-A? extends B?
		-A extends A? (so A extends B?)
		-A? does not extend A or B
	-(A?) is a separate type variable from (A) (although in practice it could delegate most calls to the (A) object
	-can also unpack with ??
	
Things to push:
Functional programming
LINQy syntax
Reflection
	* easy and not ugly even with attributes
	* reflect over public types / methods
	* type objects make it easy to get at methods/properties
		type.properties (instance)
		type.staticProperties
		type.allProperties (static & instance)
		same for methods, attributes
		.attributes
		.getAttribute<TAttribute>()
	
Core types:
	-Object alias obj
	-Integer64 alias int		
	-Byte alias byte (unsigned byte)
	-Character32 alias char (unsigned char)
	-Sequence<T> alias seq<T>
	-Iterator<T>
	-ImmutableArray<char> alias str
	-Tuple<T[]> tuple type with value semantics
	-Action<T[]> void function alias (T1, T2) => void
	-Function<T[], TReturn> alias (T1, T2) => TReturn
	-Type alias type?
	-Platform types

Syntax:
	-c# style lambdas: (int a, int b) => 2 + a + b
	-implicitly-typed, loosely declared vars (e. g. x = 10;)
	-can just use A instead of A.class or typeof(A). When you need to differentiate btw static access (default) and
		accessing a member of the type object, A.x is static and (A).x is the x member of the type object?
	-"or if null operator" ?? like in c# can unpack nullables
	-chaining mylist.skip(1).take(1)
	-null-safe chaining category.hierarchy.?hierarchylevel will fail if category is null but will return null if hierarchy is null OR hierarchylevel is null
	-comma cascading: message.write(),send() returns the return value of send() or else the original message object if send() returns void
		-note that parens in lists, args, etc are given precedence over cascades (but you can just wrap it in parens) (e. g. print((message.write(), send())))
	-and, or, ! as both bitwise and boolean operators
	-ternary operator condition ? 1 : 2
	-member access: list.sort, get list.size, set list[], List<int>.sort gives a method that takes a List<int> and an order<int> 
		- these return functions / member metadata
	-strong generics with c# syntax
	-strings:
		-normal "" syntax
		-@"raw" syntax
	-no parens required for if, for, etc. but you do need braces
		- if model.hasItem and !model.isNew { do something }
	-dynamic access to objects with "->" operator
		- model->isNew (throws exception if there's no property or method isNew)
		- safely, with model->?isNew
		- dynamic access returns obj? UNLESS there's an implicit type for the result
			- e. g. bool x = model->isNew; will crash with cast exception unless the result is bool
	-using keyword like in c#, but 3 ways to use
		- using(x = disposable()) { }
		- using(predefineddisposable) {}
		- using(disposableexpression) without braces returns the expression, but guarantees disposal at the end of the current scope (do we want this?)
	-control flow
		- if a {} else if b {} else {}
			- could just compile to case, but you have to be careful about break/continue treatment
		- for loops, both traditional (c-style) (for decl; condition; increment {}) and java/c# foreach: for x in list { }
			- break and continue
			- "on" blocks:
				- these are declared after the loop
					- on break {} runs after the loop breaks
					- on finish {} runs when the loop condition returns false
					- on continue {} runs immediately after each continue
				- this is decared inside the loop
					- on first {} runs on the first iteration (can have multiple of these inside loop)
		- case statements (like switch, but more general)
			- either case(value) or just case { }
			- case (obj) { when a: do(); break; else: break; }
			- all except the last when must end in break (exit case), return (return from func), or continue (fall through)
			- supports on break
			- when bool expression
			- when object (checks equality: equivalent to when value == object) (how does this work for bools/patterns?) 
			- when pattern
				- patterns can be any object that implements IPattern
				- custom extractable patterns e. g. something like when MathPatterns.squareOf { a }
				- enumerable patterns (e. g. [val, 1, 2, ...])
				- Type or Type varname
				- regexes (these implement IPattern with custom extract for the match)
	- error handling
		- distinction between errors (bugs) and exceptions (unexpected but non-buggy occurrences)
		- runtime where checks on functions throw errors
			- e. g. int foo(int x) where x >= 0 { return x + 1; }
		- fail pseudo-function used to crash
			- fail(Exception/Error) fails with a certain error
			- fail(string, optional other data) is short for fail(Error(string, other data))
		- try { } block supports on fail (any exception), on fail(ExceptionType), or on fail(ExceptionType e)
			- also supports finally {}
		- using block supports on fail as well: the using object is available in the on fail block!
	- equality and comparison
		- == (equiv. to method Object.equals(a, b)) which does some null/type checks and then calls a.equals(b)
		- != equiv to !Object.equals(a, b)
		- getHash() method must be overriden with equals()
		- The IComparable interface provides int compareTo() which is defined as in java
			- automatically enables operators <, >, <=, >= (are these methods or direct translations?)
			- IComparable overrides equals() to compareTo == 0
			- IComparable requires that getHash() be overriden to match equality. This may seem like a nuisance but few types
				implement IComparable
		- Object.areIdentical(a, b) provides reference equality, which you really shouldn't need very much
		- reference types default to an implementation of equals() that just calls isIdenticalTo()
		- value types override equals() and isIdenticalTo() with field-by-field comparisons
		- the collection types don't have equality definitions (as they do in java). Rather, there are Equality objects that
			can be used for determining list/set/map equality
	- operator overloading
		- not overloading, implementing!
			- the idea is to discourage using things like + or << to mean something other than plus or bit shift
		- the numeric operators +, -, /, *, ^ can all be overriden
		- as can the bitwise operators and, or, xor, !, <<, >>, >>>
		- +=, >>=, etc. come for free and cannot have their own definitions
		- operators are overridden via like-named methods. There are two types of overridable operators
			- unrestricted: + and - need only fit the signature T plus(V value)
				- this allows support for string concatentation with +, datetime + duration, etc.
			- restricted: the other operators require that the type implement numeric or bitwise:
				- each interface requires all the corresponding operators, which should discourage misues
				- e. g. "and" must take 2 bitwise and return a bitwise
				- e. g. int types would implement numeric and bitwise
				- this would allow for a bitset type that implemented all of the bitwise operators!
				- note that unary minus in included in this group
	- collections
		- sequence syntax (optional type)[1, 2, 3] default is List if no type is specified
		- tuple syntax (1, 2) or (x: 1, y: 2) (or (1 : 2) for key-value pairs?)
		- map syntax { (1 : 2), (2 : 3) } equivalent to Map[(key: 1, value: 2)]
		- indexer syntax a.get(T key) can be called as a[key], set(T key, V value) can be called as a[key] = value		 
		- range syntax [a .. b] (inclusive) or [a .. b) exclusive
			- [1 .. 10 by 2] has 1, 3, 5, 7, 9
			- syntax is [T .. (T) (by V)]
			- by V can be ignored if T is numeric (and thus has value for 1), but V must always be numeric
			- V is not necessarily T because you can do something like [DateTime.Now .. date by 1hr)
			- first can also be exclusive (1 .. 5) has 2, 3, 4
			- can omit the second value for an infinite range e. g. the multiples of ten are [0 .. by 10). Infinite ranges must end in ) squares are [0 .. ).select(i => i * i);
			- should we restrict to ints because of floating point issues (e. g. 1.0 .. 10.0 by .1 might not include 10? Could just limit to )-ended
			- types given determine the type returned (e. g. known count?)
			- support for in in place of by? e. g. [k .. n in 10]
	- constructors
		- declared as new()
		ViewModel#replace (also, safe mode: ViewModel#?replace -- is this relevant?)
		str.replace
		str:replace
		str@replace
		@ViewModel
		@str.is(@obj)
		str#.is(obj#)
		model.hierarchy.level
		model.hierarchy.?level
		model.hierarchy?.level
		model.hierarchy->?level
		model.hierarchy?->level
	
		
Libraries:
	-Collections: good collections is a core proposition of Wyvern
		-The root of the collection hierarchy is a Sequence (iterable)
		-every other collection has a corresponding View type which is immutable
		-Array: indexable sequence
		-Collection: sequence with add/remove/modCount
		-List is Array, Collection
		-Set is Collection of unique elements sets have an equalityComparer property
		-Map is Set of (key, value) tuples. It has a key equality comparer which is used to derive it's set equality comparer
		-specialized collections
			- immutable collections
	
Tasks to simplify:
	Data handling: how to navigate & use complex object graphs
	- easy reflection over properties
	- easy cloning/augmenting
	- easy equals/hash impl
	- automatically generate immutable & read-only views and conversion methods (e.g. myRecord.view, myRecord.toImmutable)
	- safe access .?, ->?
	- dynamic access ->
	- deep access a..b might be a.c.b or a.d.b or a.e.f.b. Not allowed if ambiguous
		- deep dynamic access a->->b is SLOW... ambiguity checked at runtime
		- safe still works, as in a..?b: it's safe all the way through!
	- convenient init syntax
	- anonymous tuple types
	- convert records to collections (e. g. dictionaries)
	- maybe records are just a special case of collections!?
	- these plus LINQy functional collection manipulation should make for very powerful and concise data handling
	
-------------------------------

Small examples:

type declaration

attributes type name[generics] [is superclasses] [where statements] {
}

example:
abstract type SortedSet<TElement> is Set<TElement>
	where TElement is IComparable<TElement> {
}

method declaration

attributes name[generics](args) [=> return type] [where statements] {
}

example:
Cached lookup<T>(T key) => Record
	where T is IComparable<T> {
}

property declaration:

attributes [propertyType] name [= exp|{
	[getter]
	[setters]
	[default: exp]
}]

example:
int count {
	private set {
		property = value;		
	}
	set(double) {
		field = value;
	}
}

constructor declaration:
new [name](args) [where statements] {
}

example:
type Date {
	new(int .ticks) {
	}
	
	new fromYear(int year) {
		this(year / ticksPerYear);
	}
}

usage:
d = Date(1000);
d = Date.fromYear(2012);
