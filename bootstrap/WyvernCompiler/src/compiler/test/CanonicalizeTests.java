/**
 * 
 */
package compiler.test;

import java.util.Collections;

import compiler.*;
import compiler.canonicalize.AutoGeneratedSymbolTypeCanonicalizer;
import compiler.canonicalize.Canonicalize;

/**
 * @author Michael
 * 
 */
public class CanonicalizeTests {
	public static void testFlattenLists() {
		Context c = new Context();
		SymbolType list = c.getNonTerminalSymbolType("list"), comma = c.getTerminalSymbolType(","), exp = c
				.getNonTerminalSymbolType("exp");

		Symbol sep = comma.createSymbol(",", 1, 1), e = exp.createSymbol();
		Symbol parseTree = exp.createSymbol(
				e,
				list.createSymbol(
						exp.createSymbol(),
						sep,
						list.createSymbol(exp.createSymbol(list.createSymbol(e, list.createSymbol())), sep,
								list.createSymbol(e))), e);

		// test removing separators
		Symbol flattened = Canonicalize.flattenLists(parseTree, Collections.singletonMap(list, comma), true);

		Utils.check(flattened.children().size() == 3);
		Symbol listSymbol = flattened.children().get(1);
		Utils.check(listSymbol.type().equals(list));
		Utils.check(listSymbol.children().size() == 3);
		Symbol innerList = listSymbol.children().get(1).children().get(0);
		Utils.check(innerList.type().equals(list));
		Utils.check(innerList.children().size() == 1);
		Utils.check(innerList.children().get(0) == e);

		// test keeping separators
		flattened = Canonicalize.flattenLists(parseTree, Collections.singletonMap(list, comma), false);
		listSymbol = flattened.children().get(1);
		Utils.check(listSymbol.type().equals(list));
		Utils.check(listSymbol.children().size() == 5);
		Utils.check(listSymbol.children().get(1) == sep && listSymbol.children().get(3) == sep);
		innerList = listSymbol.children().get(2).children().get(0);
		Utils.check(innerList.type().equals(list));
		Utils.check(innerList.children().size() == 1);
		Utils.check(innerList.children().get(0) == e);
	}

	public static void testCanonicalizeAutogenerated() {
		Context context = new Context();
		SymbolType elem = context.getTerminalSymbolType("e");
		SymbolType sep = context.getTerminalSymbolType(",");
		SymbolType list = context.listOf(elem, sep);
		SymbolType opt = context.optional(elem);
		SymbolType oneOf = context.oneOf(elem, sep);

		Symbol e = elem.createSymbol("e", 0, 0), s = sep.createSymbol("|", 0, 0);
		Symbol listParseTree = list.createSymbol(e, s, list.createSymbol(e, s, list.createSymbol(e)));
		Symbol listFlattened = AutoGeneratedSymbolTypeCanonicalizer.canonicalize(listParseTree);
		Symbol listFlattenedAgain = AutoGeneratedSymbolTypeCanonicalizer.canonicalize(listFlattened);
		Utils.check(listParseTree.text().equals(listFlattened.text()));
		Utils.check(listFlattened.children().size() == 5);
		Utils.check(listFlattenedAgain == listFlattened);
		
		Symbol optParseTree = opt.createSymbol(elem.createSymbol("e", 0, 0));
		Symbol canonicalOpt = AutoGeneratedSymbolTypeCanonicalizer.canonicalize(optParseTree);
		Utils.check(canonicalOpt.text().equals(optParseTree.text()));
		Utils.check(canonicalOpt.type().equals(elem));
		
		Symbol oneOfParseTree = oneOf.createSymbol(sep.createSymbol(",", 0, 0));
		Symbol canonicalOneOf = AutoGeneratedSymbolTypeCanonicalizer.canonicalize(oneOfParseTree);
		Utils.check(canonicalOneOf.text().equals(oneOfParseTree.text()));
		Utils.check(canonicalOneOf.type().equals(sep));
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		testFlattenLists();
		testCanonicalizeAutogenerated();

		System.out.println("All canonicalize tests passed!");
	}

}
